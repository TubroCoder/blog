<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Tubro‘s blog</title><link>https://TubroCoder.github.io/blog</link><description>童话是一种生活态度，仅此而已。</description><copyright>Tubro‘s blog</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.com/TubroCoder/blog/blob/main/image.png?raw=true</url><title>avatar</title><link>https://TubroCoder.github.io/blog</link></image><lastBuildDate>Fri, 30 May 2025 10:55:32 +0000</lastBuildDate><managingEditor>Tubro‘s blog</managingEditor><ttl>60</ttl><webMaster>Tubro‘s blog</webMaster><item><title>求职面试笔记-docker</title><link>https://TubroCoder.github.io/blog/post/qiu-zhi-mian-shi-bi-ji--docker.html</link><description>
# Docker 核心面试知识点笔记  


## 一、Docker 基础概念  


### 1. 什么是 Docker？  
Docker 是一个开源的**容器化平台**，通过将应用程序及其依赖打包成**镜像（Image）**，运行在**容器（Container）**中，实现**环境隔离、快速部署、资源高效利用**。</description><guid isPermaLink="true">https://TubroCoder.github.io/blog/post/qiu-zhi-mian-shi-bi-ji--docker.html</guid><pubDate>Fri, 30 May 2025 10:55:06 +0000</pubDate></item><item><title>求职面试笔记-Linux</title><link>https://TubroCoder.github.io/blog/post/qiu-zhi-mian-shi-bi-ji--Linux.html</link><description>
# Linux 核心面试知识点笔记  


## 一、Linux 基础概念  


### 1. Linux 内核与发行版  
#### （1）内核 vs 发行版  
- **内核（Kernel）**：操作系统核心，负责进程调度、内存管理、硬件驱动、文件系统等底层功能（如 Linux 5.15.x）。</description><guid isPermaLink="true">https://TubroCoder.github.io/blog/post/qiu-zhi-mian-shi-bi-ji--Linux.html</guid><pubDate>Fri, 30 May 2025 10:53:51 +0000</pubDate></item><item><title>求职面试笔记-关系型数据库（mysql、pg）</title><link>https://TubroCoder.github.io/blog/post/qiu-zhi-mian-shi-bi-ji---guan-xi-xing-shu-ju-ku-%EF%BC%88mysql%E3%80%81pg%EF%BC%89.html</link><description>
# 关系型数据库核心面试知识点笔记  


## 一、MySQL vs PostgreSQL 对比  


### 1. 核心定位与适用场景  
| 特性                | MySQL                                      | PostgreSQL                               |  
|---------------------|------------------------------------------|------------------------------------------|  
| **定位**            | 轻量级、高性能 OLTP 数据库（互联网首选）  | 企业级、支持复杂业务逻辑的通用数据库     |  
| **适用场景**        | 高并发读写、电商/社交类业务（如订单、用户表） | 金融/政务/数据分析（需复杂 SQL、事务强一致） |  
| **数据类型**        | 支持基础类型 + 部分扩展（如 JSON）         | 支持复杂类型（数组、枚举、JSONB、几何类型） |  
| **事务特性**        | InnoDB 支持 ACID，默认隔离级别 RR          | 全功能 ACID，支持更细粒度锁（行级锁默认） |  
| **扩展性**          | 依赖中间件（如 MyCat）实现分库分表         | 内置 CTE、窗口函数、自定义函数（扩展性强）|  


### 2. 关键差异对比  
#### （1）数据类型  
| MySQL 特有类型       | PostgreSQL 特有类型         | 通用类型（均支持）         |  
|---------------------|-----------------------------|----------------------------|  
| `ENUM`、`SET`       | `ARRAY`、`HSTORE`、`JSONB`  | `INT`、`VARCHAR`、`DATE`   |  
| `AUTO_INCREMENT`    | `SERIAL`（自增序列）         | `BLOB`、`TEXT`             |  

#### （2）事务隔离级别  
| 隔离级别            | MySQL（InnoDB）             | PostgreSQL                 |  
|---------------------|-----------------------------|----------------------------|  
| **读未提交**        | 支持                          | 支持                       |  
| **读已提交**        | 支持（默认 RR，可切换）       | 支持（默认 RC）            |  
| **可重复读**        | 默认隔离级别                 | 支持                       |  
| **串行化**          | 支持                          | 支持                       |  

#### （3）存储引擎  
| MySQL                 | PostgreSQL                   |  
|---------------------|-----------------------------|  
| 多引擎架构（InnoDB/MyISAM 等） | 单引擎架构（内核集成存储逻辑）|  
| 默认引擎 InnoDB（支持事务）   | 默认引擎 Heap（内存表）？No！默认是事务安全的存储引擎，实际PostgreSQL没有存储引擎的概念，其存储引擎是内置的，支持事务和复杂特性。</description><guid isPermaLink="true">https://TubroCoder.github.io/blog/post/qiu-zhi-mian-shi-bi-ji---guan-xi-xing-shu-ju-ku-%EF%BC%88mysql%E3%80%81pg%EF%BC%89.html</guid><pubDate>Fri, 30 May 2025 10:52:00 +0000</pubDate></item><item><title>求职面试笔记-mq</title><link>https://TubroCoder.github.io/blog/post/qiu-zhi-mian-shi-bi-ji--mq.html</link><description>
# MQ（消息队列）核心面试知识点笔记  


## 一、为什么需要 MQ？  


### 1. 核心价值  
消息队列（Message Queue, MQ）是分布式系统中的**异步通信中间件**，核心解决以下问题：  


| 问题                | 场景说明                                                                 | MQ 解决方案                                                           |  
|---------------------|--------------------------------------------------------------------------|-----------------------------------------------------------------------|  
| **系统解耦**        | 订单系统需通知库存、物流、支付等多个系统，直接调用导致强依赖             | 订单系统只发消息到 MQ，其他系统订阅消息，互不影响                     |  
| **异步提速**        | 用户下单需同步调用库存扣减、积分发放等耗时操作，响应时间长               | 主流程（下单）完成后，其他操作通过 MQ 异步处理，响应时间从秒级→毫秒级  |  
| **削峰填谷**        | 秒杀活动时，短时间内请求量暴增（10万/秒），超出数据库处理能力（1万/秒）  | MQ 缓存请求（削峰），数据库按稳定速率消费（填谷）                     |  


### 2. 典型使用场景  
- 异步通知（如短信、邮件发送）；  
- 日志收集（微服务日志汇总到 ELK）；  
- 流量控制（秒杀活动的请求缓冲）；  
- 数据同步（MySQL -binlog 通过 MQ 同步到 ES）。</description><guid isPermaLink="true">https://TubroCoder.github.io/blog/post/qiu-zhi-mian-shi-bi-ji--mq.html</guid><pubDate>Fri, 30 May 2025 10:47:09 +0000</pubDate></item><item><title>求职面试笔记-redis</title><link>https://TubroCoder.github.io/blog/post/qiu-zhi-mian-shi-bi-ji--redis.html</link><description>
# Redis 核心面试知识点笔记  


## 一、Redis 集群模式  


### 1. 主从集群（Master-Slave）  
**核心目标**：解决单点故障问题，实现数据冗余和读请求负载均衡。</description><guid isPermaLink="true">https://TubroCoder.github.io/blog/post/qiu-zhi-mian-shi-bi-ji--redis.html</guid><pubDate>Fri, 30 May 2025 10:41:58 +0000</pubDate></item><item><title>求职面试笔记-springcloud#openFeign</title><link>https://TubroCoder.github.io/blog/post/qiu-zhi-mian-shi-bi-ji--springcloud%23openFeign.html</link><description>
# Spring Cloud OpenFeign 核心面试知识点笔记  


## 一、OpenFeign 是什么？  


### 1. 定义与定位  
OpenFeign 是 Spring Cloud 生态中的**声明式 HTTP 客户端**，由 Netfix 开源（现由社区维护）。</description><guid isPermaLink="true">https://TubroCoder.github.io/blog/post/qiu-zhi-mian-shi-bi-ji--springcloud%23openFeign.html</guid><pubDate>Fri, 30 May 2025 10:34:23 +0000</pubDate></item><item><title>求职面试笔记-springCloud</title><link>https://TubroCoder.github.io/blog/post/qiu-zhi-mian-shi-bi-ji--springCloud.html</link><description>
# Spring Cloud 核心面试知识点笔记  


## 一、核心注解  


### 1. 服务注册与发现注解  
| 注解                  | 作用                                                                 | 示例                                                                 |  
|-----------------------|----------------------------------------------------------------------|----------------------------------------------------------------------|  
| `@EnableEurekaServer`  | 声明当前服务为 Eureka 注册中心（服务端）                              | `@EnableEurekaServer public class EurekaServerApplication { ... }`  |  
| `@EnableDiscoveryClient` | 声明当前服务为 Eureka/Consul/Nacos 客户端（注册到注册中心）          | `@EnableDiscoveryClient public class OrderServiceApplication { ... }` |  


### 2. 负载均衡注解  
| 注解                  | 作用                                                                 | 示例                                                                 |  
|-----------------------|----------------------------------------------------------------------|----------------------------------------------------------------------|  
| `@LoadBalanced`        | 标记 `RestTemplate` 或 `WebClient` 开启负载均衡（结合 Ribbon 或 Spring Cloud LoadBalancer） | `@Bean @LoadBalanced public RestTemplate restTemplate() { ... }`     |  


### 3. 熔断器注解  
| 注解                  | 作用                                                                 | 示例                                                                 |  
|-----------------------|----------------------------------------------------------------------|----------------------------------------------------------------------|  
| `@HystrixCommand`      | 标记方法启用 Hystrix 熔断和降级（已过时，推荐 Resilience4J）          | `@HystrixCommand(fallbackMethod = 'fallback') public String callService() { ... }` |  
| `@CircuitBreaker`      | Resilience4J 熔断器注解（Spring Cloud Circuit Breaker 抽象）          | `@CircuitBreaker(name = 'orderService', fallbackMethod = 'fallback')` |  


### 4. 声明式调用注解  
| 注解                  | 作用                                                                 | 示例                                                                 |  
|-----------------------|----------------------------------------------------------------------|----------------------------------------------------------------------|  
| `@FeignClient`         | 声明一个 Feign 客户端接口（自动生成代理类调用远程服务）              | `@FeignClient(name = 'product-service') public interface ProductFeignClient { ... }` |  


### 5. 配置中心注解  
| 注解                  | 作用                                                                 | 示例                                                                 |  
|-----------------------|----------------------------------------------------------------------|----------------------------------------------------------------------|  
| `@RefreshScope`        | 标记 Bean 支持配置动态刷新（当配置中心配置变更时，重新加载 Bean）     | `@RefreshScope @Service public class ConfigService { ... }`          |  


## 二、核心组件详解  


### 1. 服务注册与发现（Service Discovery）  
**核心作用**：解决分布式系统中服务实例的动态管理（注册、发现、健康检查）。</description><guid isPermaLink="true">https://TubroCoder.github.io/blog/post/qiu-zhi-mian-shi-bi-ji--springCloud.html</guid><pubDate>Fri, 30 May 2025 10:28:33 +0000</pubDate></item><item><title>求职面试笔记-springboot</title><link>https://TubroCoder.github.io/blog/post/qiu-zhi-mian-shi-bi-ji--springboot.html</link><description>
# Spring Boot 核心面试知识点笔记  


## 一、对 Spring Boot 的简单理解  


### 1. 定义与目标  
Spring Boot 是 Spring 生态的**快速开发框架**，通过“**约定大于配置**”（Convention Over Configuration）的理念，解决了传统 Spring 项目**配置繁琐、依赖管理复杂**的问题。</description><guid isPermaLink="true">https://TubroCoder.github.io/blog/post/qiu-zhi-mian-shi-bi-ji--springboot.html</guid><pubDate>Fri, 30 May 2025 10:22:00 +0000</pubDate></item><item><title>求职面试笔记-springMVC</title><link>https://TubroCoder.github.io/blog/post/qiu-zhi-mian-shi-bi-ji--springMVC.html</link><description>
# Spring MVC 工作原理详解


## 一、核心概念

Spring MVC 是 Spring 框架的 Web 层解决方案，基于 **MVC 模式**设计，通过清晰的组件分工实现请求处理、业务逻辑和视图渲染的解耦。</description><guid isPermaLink="true">https://TubroCoder.github.io/blog/post/qiu-zhi-mian-shi-bi-ji--springMVC.html</guid><pubDate>Fri, 30 May 2025 10:16:17 +0000</pubDate></item><item><title>求职面试笔记-spring</title><link>https://TubroCoder.github.io/blog/post/qiu-zhi-mian-shi-bi-ji--spring.html</link><description>
# Spring 核心面试知识点笔记


## 一、Bean 的生命周期


### 1. 完整生命周期阶段

Spring Bean 的生命周期是从实例化到销毁的完整过程，核心阶段如下（按执行顺序）：

| 阶段                | 说明                                                                 | 关键接口/注解                          |
|---------------------|----------------------------------------------------------------------|----------------------------------------|
| **实例化**          | 通过构造函数创建对象（或工厂方法）                                   | `InstantiationAwareBeanPostProcessor`  |
| **属性注入**        | 依赖注入（如 `@Autowired`、`@Resource`）                             | `AutowiredAnnotationBeanPostProcessor` |
| **Aware 接口回调**  | 感知 Spring 容器信息                                                 | `BeanNameAware`、`BeanFactoryAware`、`ApplicationContextAware` |
| **BeanPostProcessor 前置处理** | 容器对 Bean 进行自定义修改（如 AOP 代理）       | `postProcessBeforeInitialization`      |
| **初始化**          | 完成业务初始化逻辑                                                   | `InitializingBean`（`afterPropertiesSet`）、`@PostConstruct`、`init-method` |
| **BeanPostProcessor 后置处理** | 初始化后的最终修改                                                   | `postProcessAfterInitialization`       |
| **使用**            | Bean 被业务代码调用                                                 | -                                      |
| **销毁**            | 容器关闭时执行清理逻辑                                               | `DisposableBean`（`destroy`）、`@PreDestroy`、`destroy-method` |


### 2. 生命周期流程图（简化版）

```mermaid
graph TD
    A[实例化] --&gt; B[属性注入]
    B --&gt; C[Aware接口回调]
    C --&gt; D[BeanPostProcessor前置处理]
    D --&gt; E[初始化（@PostConstruct/afterPropertiesSet/init-method）]
    E --&gt; F[BeanPostProcessor后置处理]
    F --&gt; G[使用]
    G --&gt; H[销毁（@PreDestroy/destroy/destroy-method）]
```


### 3. 代码示例：生命周期阶段验证

```java
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.*;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.stereotype.Component;
import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;

@Component
public class LifecycleBean implements 
    BeanNameAware, BeanFactoryAware, ApplicationContextAware, InitializingBean, DisposableBean {

    // 1. 实例化阶段（构造函数）
    public LifecycleBean() {
        System.out.println('[1] 构造函数调用（实例化）');
    }

    // 2. 属性注入（假设存在依赖注入）
    // @Autowired 会在此阶段执行

    // 3. Aware接口回调
    @Override
    public void setBeanName(String name) {
        System.out.println('[2] BeanNameAware.setBeanName() 调用，Bean名称：' + name);
    }

    @Override
    public void setBeanFactory(BeanFactory factory) throws BeansException {
        System.out.println('[3] BeanFactoryAware.setBeanFactory() 调用');
    }

    @Override
    public void setApplicationContext(ApplicationContext context) throws BeansException {
        System.out.println('[4] ApplicationContextAware.setApplicationContext() 调用');
    }

    // 4. BeanPostProcessor 前置处理（由容器自动触发，示例中省略具体实现）

    // 5. 初始化阶段
    @PostConstruct
    public void postConstruct() {
        System.out.println('[5] @PostConstruct 注解方法调用');
    }

    @Override
    public void afterPropertiesSet() throws Exception {
        System.out.println('[6] InitializingBean.afterPropertiesSet() 调用');
    }

    // 自定义初始化方法（需在配置中声明）
    public void customInit() {
        System.out.println('[7] 自定义初始化方法 customInit() 调用');
    }

    // 6. BeanPostProcessor 后置处理（由容器自动触发）

    // 7. 使用阶段（业务方法）
    public void doWork() {
        System.out.println('[8] Bean 正在被使用');
    }

    // 8. 销毁阶段
    @PreDestroy
    public void preDestroy() {
        System.out.println('[9] @PreDestroy 注解方法调用');
    }

    @Override
    public void destroy() throws Exception {
        System.out.println('[10] DisposableBean.destroy() 调用');
    }

    // 自定义销毁方法（需在配置中声明）
    public void customDestroy() {
        System.out.println('[11] 自定义销毁方法 customDestroy() 调用');
    }
}
```

**配置类声明初始化/销毁方法**：
```java
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class LifecycleConfig {
    @Bean(initMethod = 'customInit', destroyMethod = 'customDestroy')
    public LifecycleBean lifecycleBean() {
        return new LifecycleBean();
    }
}
```


## 二、事务及其传播机制


### 1. 事务的 ACID 特性

| 特性         | 说明                                                                 |
|--------------|----------------------------------------------------------------------|
| 原子性（Atomicity） | 事务内操作要么全部成功，要么全部回滚                                 |
| 一致性（Consistency） | 事务执行前后数据状态符合业务规则（如转账后总金额不变）               |
| 隔离性（Isolation） | 多事务并发时，彼此互不干扰（通过隔离级别控制）                       |
| 持久性（Durability） | 事务提交后，数据修改永久保存（依赖数据库持久化机制）                 |


### 2. Spring 事务管理方式

| 方式         | 实现原理               | 优点                                   | 缺点                                   |
|--------------|------------------------|----------------------------------------|----------------------------------------|
| 声明式事务   | 基于 AOP 自动代理       | 无侵入性，代码简洁（通过 `@Transactional` 注解） | 依赖 AOP 环境，无法细粒度控制事务边界   |
| 编程式事务   | 手动调用 `TransactionTemplate` | 灵活控制事务边界（如条件提交/回滚）     | 代码冗余，侵入业务逻辑                 |


### 3. 事务传播机制（7种）

传播机制定义了**多个事务方法嵌套调用时**，事务如何合并或独立执行。</description><guid isPermaLink="true">https://TubroCoder.github.io/blog/post/qiu-zhi-mian-shi-bi-ji--spring.html</guid><pubDate>Fri, 30 May 2025 10:12:03 +0000</pubDate></item><item><title>blog第一条文章</title><link>https://TubroCoder.github.io/blog/post/blog-di-yi-tiao-wen-zhang.html</link><description>blog第一条文章。</description><guid isPermaLink="true">https://TubroCoder.github.io/blog/post/blog-di-yi-tiao-wen-zhang.html</guid><pubDate>Fri, 30 May 2025 09:00:28 +0000</pubDate></item></channel></rss>