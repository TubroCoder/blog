{"singlePage": ["about", "link"], "startSite": "", "filingNum": "", "onePageListNum": 15, "commentLabelColor": "#006b75", "yearColorList": ["#bc4c00", "#0969da", "#1f883d", "#A333D0"], "i18n": "CN", "themeMode": "manual", "dayTheme": "light", "nightTheme": "dark", "urlMode": "pinyin", "script": "", "style": "", "head": "", "indexScript": "", "indexStyle": "", "bottomText": "", "showPostSource": 1, "iconList": {"music": "M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8Zm8-6.5a6.5 6.5 0 1 0 0 13 6.5 6.5 0 0 0 0-13Z"}, "UTC": 8, "rssSplit": "sentence", "exlink": {"music": "https://music.meekdai.com"}, "needComment": 1, "allHead": "", "title": "Tubro\u2018s blog", "subTitle": "\u7ae5\u8bdd\u662f\u4e00\u79cd\u751f\u6d3b\u6001\u5ea6\uff0c\u4ec5\u6b64\u800c\u5df2\u3002", "avatarUrl": "https://github.com/TubroCoder/blog/blob/main/image.png?raw=true", "GMEEK_VERSION": "last", "postListJson": {"P1": {"htmlDir": "docs/post/blog-di-yi-tiao-wen-zhang.html", "labels": ["spring"], "postTitle": "blog\u7b2c\u4e00\u6761\u6587\u7ae0", "postUrl": "post/blog-di-yi-tiao-wen-zhang.html", "postSourceUrl": "https://github.com/TubroCoder/blog/issues/1", "commentNum": 0, "wordCount": 9, "description": "blog\u7b2c\u4e00\u6761\u6587\u7ae0\u3002", "top": 0, "createdAt": 1748595628, "style": "", "script": "", "head": "", "ogImage": "https://github.com/TubroCoder/blog/blob/main/image.png?raw=true", "createdDate": "2025-05-30", "dateLabelColor": "#0969da"}, "P2": {"htmlDir": "docs/post/qiu-zhi-mian-shi-bi-ji--spring.html", "labels": ["\u9762\u8bd5\u7b14\u8bb0"], "postTitle": "\u6c42\u804c\u9762\u8bd5\u7b14\u8bb0-spring", "postUrl": "post/qiu-zhi-mian-shi-bi-ji--spring.html", "postSourceUrl": "https://github.com/TubroCoder/blog/issues/2", "commentNum": 0, "wordCount": 12917, "description": "\n# Spring \u6838\u5fc3\u9762\u8bd5\u77e5\u8bc6\u70b9\u7b14\u8bb0\n\n\n## \u4e00\u3001Bean \u7684\u751f\u547d\u5468\u671f\n\n\n### 1. \u5b8c\u6574\u751f\u547d\u5468\u671f\u9636\u6bb5\n\nSpring Bean \u7684\u751f\u547d\u5468\u671f\u662f\u4ece\u5b9e\u4f8b\u5316\u5230\u9500\u6bc1\u7684\u5b8c\u6574\u8fc7\u7a0b\uff0c\u6838\u5fc3\u9636\u6bb5\u5982\u4e0b\uff08\u6309\u6267\u884c\u987a\u5e8f\uff09\uff1a\n\n| \u9636\u6bb5                | \u8bf4\u660e                                                                 | \u5173\u952e\u63a5\u53e3/\u6ce8\u89e3                          |\n|---------------------|----------------------------------------------------------------------|----------------------------------------|\n| **\u5b9e\u4f8b\u5316**          | \u901a\u8fc7\u6784\u9020\u51fd\u6570\u521b\u5efa\u5bf9\u8c61\uff08\u6216\u5de5\u5382\u65b9\u6cd5\uff09                                   | `InstantiationAwareBeanPostProcessor`  |\n| **\u5c5e\u6027\u6ce8\u5165**        | \u4f9d\u8d56\u6ce8\u5165\uff08\u5982 `@Autowired`\u3001`@Resource`\uff09                             | `AutowiredAnnotationBeanPostProcessor` |\n| **Aware \u63a5\u53e3\u56de\u8c03**  | \u611f\u77e5 Spring \u5bb9\u5668\u4fe1\u606f                                                 | `BeanNameAware`\u3001`BeanFactoryAware`\u3001`ApplicationContextAware` |\n| **BeanPostProcessor \u524d\u7f6e\u5904\u7406** | \u5bb9\u5668\u5bf9 Bean \u8fdb\u884c\u81ea\u5b9a\u4e49\u4fee\u6539\uff08\u5982 AOP \u4ee3\u7406\uff09       | `postProcessBeforeInitialization`      |\n| **\u521d\u59cb\u5316**          | \u5b8c\u6210\u4e1a\u52a1\u521d\u59cb\u5316\u903b\u8f91                                                   | `InitializingBean`\uff08`afterPropertiesSet`\uff09\u3001`@PostConstruct`\u3001`init-method` |\n| **BeanPostProcessor \u540e\u7f6e\u5904\u7406** | \u521d\u59cb\u5316\u540e\u7684\u6700\u7ec8\u4fee\u6539                                                   | `postProcessAfterInitialization`       |\n| **\u4f7f\u7528**            | Bean \u88ab\u4e1a\u52a1\u4ee3\u7801\u8c03\u7528                                                 | -                                      |\n| **\u9500\u6bc1**            | \u5bb9\u5668\u5173\u95ed\u65f6\u6267\u884c\u6e05\u7406\u903b\u8f91                                               | `DisposableBean`\uff08`destroy`\uff09\u3001`@PreDestroy`\u3001`destroy-method` |\n\n\n### 2. \u751f\u547d\u5468\u671f\u6d41\u7a0b\u56fe\uff08\u7b80\u5316\u7248\uff09\n\n```mermaid\ngraph TD\n    A[\u5b9e\u4f8b\u5316] --> B[\u5c5e\u6027\u6ce8\u5165]\n    B --> C[Aware\u63a5\u53e3\u56de\u8c03]\n    C --> D[BeanPostProcessor\u524d\u7f6e\u5904\u7406]\n    D --> E[\u521d\u59cb\u5316\uff08@PostConstruct/afterPropertiesSet/init-method\uff09]\n    E --> F[BeanPostProcessor\u540e\u7f6e\u5904\u7406]\n    F --> G[\u4f7f\u7528]\n    G --> H[\u9500\u6bc1\uff08@PreDestroy/destroy/destroy-method\uff09]\n```\n\n\n### 3. \u4ee3\u7801\u793a\u4f8b\uff1a\u751f\u547d\u5468\u671f\u9636\u6bb5\u9a8c\u8bc1\n\n```java\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.*;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.stereotype.Component;\nimport javax.annotation.PostConstruct;\nimport javax.annotation.PreDestroy;\n\n@Component\npublic class LifecycleBean implements \n    BeanNameAware, BeanFactoryAware, ApplicationContextAware, InitializingBean, DisposableBean {\n\n    // 1. \u5b9e\u4f8b\u5316\u9636\u6bb5\uff08\u6784\u9020\u51fd\u6570\uff09\n    public LifecycleBean() {\n        System.out.println('[1] \u6784\u9020\u51fd\u6570\u8c03\u7528\uff08\u5b9e\u4f8b\u5316\uff09');\n    }\n\n    // 2. \u5c5e\u6027\u6ce8\u5165\uff08\u5047\u8bbe\u5b58\u5728\u4f9d\u8d56\u6ce8\u5165\uff09\n    // @Autowired \u4f1a\u5728\u6b64\u9636\u6bb5\u6267\u884c\n\n    // 3. Aware\u63a5\u53e3\u56de\u8c03\n    @Override\n    public void setBeanName(String name) {\n        System.out.println('[2] BeanNameAware.setBeanName() \u8c03\u7528\uff0cBean\u540d\u79f0\uff1a' + name);\n    }\n\n    @Override\n    public void setBeanFactory(BeanFactory factory) throws BeansException {\n        System.out.println('[3] BeanFactoryAware.setBeanFactory() \u8c03\u7528');\n    }\n\n    @Override\n    public void setApplicationContext(ApplicationContext context) throws BeansException {\n        System.out.println('[4] ApplicationContextAware.setApplicationContext() \u8c03\u7528');\n    }\n\n    // 4. BeanPostProcessor \u524d\u7f6e\u5904\u7406\uff08\u7531\u5bb9\u5668\u81ea\u52a8\u89e6\u53d1\uff0c\u793a\u4f8b\u4e2d\u7701\u7565\u5177\u4f53\u5b9e\u73b0\uff09\n\n    // 5. \u521d\u59cb\u5316\u9636\u6bb5\n    @PostConstruct\n    public void postConstruct() {\n        System.out.println('[5] @PostConstruct \u6ce8\u89e3\u65b9\u6cd5\u8c03\u7528');\n    }\n\n    @Override\n    public void afterPropertiesSet() throws Exception {\n        System.out.println('[6] InitializingBean.afterPropertiesSet() \u8c03\u7528');\n    }\n\n    // \u81ea\u5b9a\u4e49\u521d\u59cb\u5316\u65b9\u6cd5\uff08\u9700\u5728\u914d\u7f6e\u4e2d\u58f0\u660e\uff09\n    public void customInit() {\n        System.out.println('[7] \u81ea\u5b9a\u4e49\u521d\u59cb\u5316\u65b9\u6cd5 customInit() \u8c03\u7528');\n    }\n\n    // 6. BeanPostProcessor \u540e\u7f6e\u5904\u7406\uff08\u7531\u5bb9\u5668\u81ea\u52a8\u89e6\u53d1\uff09\n\n    // 7. \u4f7f\u7528\u9636\u6bb5\uff08\u4e1a\u52a1\u65b9\u6cd5\uff09\n    public void doWork() {\n        System.out.println('[8] Bean \u6b63\u5728\u88ab\u4f7f\u7528');\n    }\n\n    // 8. \u9500\u6bc1\u9636\u6bb5\n    @PreDestroy\n    public void preDestroy() {\n        System.out.println('[9] @PreDestroy \u6ce8\u89e3\u65b9\u6cd5\u8c03\u7528');\n    }\n\n    @Override\n    public void destroy() throws Exception {\n        System.out.println('[10] DisposableBean.destroy() \u8c03\u7528');\n    }\n\n    // \u81ea\u5b9a\u4e49\u9500\u6bc1\u65b9\u6cd5\uff08\u9700\u5728\u914d\u7f6e\u4e2d\u58f0\u660e\uff09\n    public void customDestroy() {\n        System.out.println('[11] \u81ea\u5b9a\u4e49\u9500\u6bc1\u65b9\u6cd5 customDestroy() \u8c03\u7528');\n    }\n}\n```\n\n**\u914d\u7f6e\u7c7b\u58f0\u660e\u521d\u59cb\u5316/\u9500\u6bc1\u65b9\u6cd5**\uff1a\n```java\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class LifecycleConfig {\n    @Bean(initMethod = 'customInit', destroyMethod = 'customDestroy')\n    public LifecycleBean lifecycleBean() {\n        return new LifecycleBean();\n    }\n}\n```\n\n\n## \u4e8c\u3001\u4e8b\u52a1\u53ca\u5176\u4f20\u64ad\u673a\u5236\n\n\n### 1. \u4e8b\u52a1\u7684 ACID \u7279\u6027\n\n| \u7279\u6027         | \u8bf4\u660e                                                                 |\n|--------------|----------------------------------------------------------------------|\n| \u539f\u5b50\u6027\uff08Atomicity\uff09 | \u4e8b\u52a1\u5185\u64cd\u4f5c\u8981\u4e48\u5168\u90e8\u6210\u529f\uff0c\u8981\u4e48\u5168\u90e8\u56de\u6eda                                 |\n| \u4e00\u81f4\u6027\uff08Consistency\uff09 | \u4e8b\u52a1\u6267\u884c\u524d\u540e\u6570\u636e\u72b6\u6001\u7b26\u5408\u4e1a\u52a1\u89c4\u5219\uff08\u5982\u8f6c\u8d26\u540e\u603b\u91d1\u989d\u4e0d\u53d8\uff09               |\n| \u9694\u79bb\u6027\uff08Isolation\uff09 | \u591a\u4e8b\u52a1\u5e76\u53d1\u65f6\uff0c\u5f7c\u6b64\u4e92\u4e0d\u5e72\u6270\uff08\u901a\u8fc7\u9694\u79bb\u7ea7\u522b\u63a7\u5236\uff09                       |\n| \u6301\u4e45\u6027\uff08Durability\uff09 | \u4e8b\u52a1\u63d0\u4ea4\u540e\uff0c\u6570\u636e\u4fee\u6539\u6c38\u4e45\u4fdd\u5b58\uff08\u4f9d\u8d56\u6570\u636e\u5e93\u6301\u4e45\u5316\u673a\u5236\uff09                 |\n\n\n### 2. Spring \u4e8b\u52a1\u7ba1\u7406\u65b9\u5f0f\n\n| \u65b9\u5f0f         | \u5b9e\u73b0\u539f\u7406               | \u4f18\u70b9                                   | \u7f3a\u70b9                                   |\n|--------------|------------------------|----------------------------------------|----------------------------------------|\n| \u58f0\u660e\u5f0f\u4e8b\u52a1   | \u57fa\u4e8e AOP \u81ea\u52a8\u4ee3\u7406       | \u65e0\u4fb5\u5165\u6027\uff0c\u4ee3\u7801\u7b80\u6d01\uff08\u901a\u8fc7 `@Transactional` \u6ce8\u89e3\uff09 | \u4f9d\u8d56 AOP \u73af\u5883\uff0c\u65e0\u6cd5\u7ec6\u7c92\u5ea6\u63a7\u5236\u4e8b\u52a1\u8fb9\u754c   |\n| \u7f16\u7a0b\u5f0f\u4e8b\u52a1   | \u624b\u52a8\u8c03\u7528 `TransactionTemplate` | \u7075\u6d3b\u63a7\u5236\u4e8b\u52a1\u8fb9\u754c\uff08\u5982\u6761\u4ef6\u63d0\u4ea4/\u56de\u6eda\uff09     | \u4ee3\u7801\u5197\u4f59\uff0c\u4fb5\u5165\u4e1a\u52a1\u903b\u8f91                 |\n\n\n### 3. \u4e8b\u52a1\u4f20\u64ad\u673a\u5236\uff087\u79cd\uff09\n\n\u4f20\u64ad\u673a\u5236\u5b9a\u4e49\u4e86**\u591a\u4e2a\u4e8b\u52a1\u65b9\u6cd5\u5d4c\u5957\u8c03\u7528\u65f6**\uff0c\u4e8b\u52a1\u5982\u4f55\u5408\u5e76\u6216\u72ec\u7acb\u6267\u884c\u3002", "top": 0, "createdAt": 1748599923, "style": "", "script": "", "head": "", "ogImage": "https://github.com/TubroCoder/blog/blob/main/image.png?raw=true", "createdDate": "2025-05-30", "dateLabelColor": "#0969da"}, "P3": {"htmlDir": "docs/post/qiu-zhi-mian-shi-bi-ji--springMVC.html", "labels": ["\u9762\u8bd5\u7b14\u8bb0"], "postTitle": "\u6c42\u804c\u9762\u8bd5\u7b14\u8bb0-springMVC", "postUrl": "post/qiu-zhi-mian-shi-bi-ji--springMVC.html", "postSourceUrl": "https://github.com/TubroCoder/blog/issues/3", "commentNum": 0, "wordCount": 8364, "description": "\n# Spring MVC \u5de5\u4f5c\u539f\u7406\u8be6\u89e3\n\n\n## \u4e00\u3001\u6838\u5fc3\u6982\u5ff5\n\nSpring MVC \u662f Spring \u6846\u67b6\u7684 Web \u5c42\u89e3\u51b3\u65b9\u6848\uff0c\u57fa\u4e8e **MVC \u6a21\u5f0f**\u8bbe\u8ba1\uff0c\u901a\u8fc7\u6e05\u6670\u7684\u7ec4\u4ef6\u5206\u5de5\u5b9e\u73b0\u8bf7\u6c42\u5904\u7406\u3001\u4e1a\u52a1\u903b\u8f91\u548c\u89c6\u56fe\u6e32\u67d3\u7684\u89e3\u8026\u3002", "top": 0, "createdAt": 1748600177, "style": "", "script": "", "head": "", "ogImage": "https://github.com/TubroCoder/blog/blob/main/image.png?raw=true", "createdDate": "2025-05-30", "dateLabelColor": "#0969da"}, "P4": {"htmlDir": "docs/post/qiu-zhi-mian-shi-bi-ji--springboot.html", "labels": ["\u9762\u8bd5\u7b14\u8bb0"], "postTitle": "\u6c42\u804c\u9762\u8bd5\u7b14\u8bb0-springboot", "postUrl": "post/qiu-zhi-mian-shi-bi-ji--springboot.html", "postSourceUrl": "https://github.com/TubroCoder/blog/issues/4", "commentNum": 0, "wordCount": 8531, "description": "\n# Spring Boot \u6838\u5fc3\u9762\u8bd5\u77e5\u8bc6\u70b9\u7b14\u8bb0  \n\n\n## \u4e00\u3001\u5bf9 Spring Boot \u7684\u7b80\u5355\u7406\u89e3  \n\n\n### 1. \u5b9a\u4e49\u4e0e\u76ee\u6807  \nSpring Boot \u662f Spring \u751f\u6001\u7684**\u5feb\u901f\u5f00\u53d1\u6846\u67b6**\uff0c\u901a\u8fc7\u201c**\u7ea6\u5b9a\u5927\u4e8e\u914d\u7f6e**\u201d\uff08Convention Over Configuration\uff09\u7684\u7406\u5ff5\uff0c\u89e3\u51b3\u4e86\u4f20\u7edf Spring \u9879\u76ee**\u914d\u7f6e\u7e41\u7410\u3001\u4f9d\u8d56\u7ba1\u7406\u590d\u6742**\u7684\u95ee\u9898\u3002", "top": 0, "createdAt": 1748600520, "style": "", "script": "", "head": "", "ogImage": "https://github.com/TubroCoder/blog/blob/main/image.png?raw=true", "createdDate": "2025-05-30", "dateLabelColor": "#0969da"}, "P5": {"htmlDir": "docs/post/qiu-zhi-mian-shi-bi-ji--springCloud.html", "labels": ["\u9762\u8bd5\u7b14\u8bb0"], "postTitle": "\u6c42\u804c\u9762\u8bd5\u7b14\u8bb0-springCloud", "postUrl": "post/qiu-zhi-mian-shi-bi-ji--springCloud.html", "postSourceUrl": "https://github.com/TubroCoder/blog/issues/5", "commentNum": 0, "wordCount": 11244, "description": "\n# Spring Cloud \u6838\u5fc3\u9762\u8bd5\u77e5\u8bc6\u70b9\u7b14\u8bb0  \n\n\n## \u4e00\u3001\u6838\u5fc3\u6ce8\u89e3  \n\n\n### 1. \u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0\u6ce8\u89e3  \n| \u6ce8\u89e3                  | \u4f5c\u7528                                                                 | \u793a\u4f8b                                                                 |  \n|-----------------------|----------------------------------------------------------------------|----------------------------------------------------------------------|  \n| `@EnableEurekaServer`  | \u58f0\u660e\u5f53\u524d\u670d\u52a1\u4e3a Eureka \u6ce8\u518c\u4e2d\u5fc3\uff08\u670d\u52a1\u7aef\uff09                              | `@EnableEurekaServer public class EurekaServerApplication { ... }`  |  \n| `@EnableDiscoveryClient` | \u58f0\u660e\u5f53\u524d\u670d\u52a1\u4e3a Eureka/Consul/Nacos \u5ba2\u6237\u7aef\uff08\u6ce8\u518c\u5230\u6ce8\u518c\u4e2d\u5fc3\uff09          | `@EnableDiscoveryClient public class OrderServiceApplication { ... }` |  \n\n\n### 2. \u8d1f\u8f7d\u5747\u8861\u6ce8\u89e3  \n| \u6ce8\u89e3                  | \u4f5c\u7528                                                                 | \u793a\u4f8b                                                                 |  \n|-----------------------|----------------------------------------------------------------------|----------------------------------------------------------------------|  \n| `@LoadBalanced`        | \u6807\u8bb0 `RestTemplate` \u6216 `WebClient` \u5f00\u542f\u8d1f\u8f7d\u5747\u8861\uff08\u7ed3\u5408 Ribbon \u6216 Spring Cloud LoadBalancer\uff09 | `@Bean @LoadBalanced public RestTemplate restTemplate() { ... }`     |  \n\n\n### 3. \u7194\u65ad\u5668\u6ce8\u89e3  \n| \u6ce8\u89e3                  | \u4f5c\u7528                                                                 | \u793a\u4f8b                                                                 |  \n|-----------------------|----------------------------------------------------------------------|----------------------------------------------------------------------|  \n| `@HystrixCommand`      | \u6807\u8bb0\u65b9\u6cd5\u542f\u7528 Hystrix \u7194\u65ad\u548c\u964d\u7ea7\uff08\u5df2\u8fc7\u65f6\uff0c\u63a8\u8350 Resilience4J\uff09          | `@HystrixCommand(fallbackMethod = 'fallback') public String callService() { ... }` |  \n| `@CircuitBreaker`      | Resilience4J \u7194\u65ad\u5668\u6ce8\u89e3\uff08Spring Cloud Circuit Breaker \u62bd\u8c61\uff09          | `@CircuitBreaker(name = 'orderService', fallbackMethod = 'fallback')` |  \n\n\n### 4. \u58f0\u660e\u5f0f\u8c03\u7528\u6ce8\u89e3  \n| \u6ce8\u89e3                  | \u4f5c\u7528                                                                 | \u793a\u4f8b                                                                 |  \n|-----------------------|----------------------------------------------------------------------|----------------------------------------------------------------------|  \n| `@FeignClient`         | \u58f0\u660e\u4e00\u4e2a Feign \u5ba2\u6237\u7aef\u63a5\u53e3\uff08\u81ea\u52a8\u751f\u6210\u4ee3\u7406\u7c7b\u8c03\u7528\u8fdc\u7a0b\u670d\u52a1\uff09              | `@FeignClient(name = 'product-service') public interface ProductFeignClient { ... }` |  \n\n\n### 5. \u914d\u7f6e\u4e2d\u5fc3\u6ce8\u89e3  \n| \u6ce8\u89e3                  | \u4f5c\u7528                                                                 | \u793a\u4f8b                                                                 |  \n|-----------------------|----------------------------------------------------------------------|----------------------------------------------------------------------|  \n| `@RefreshScope`        | \u6807\u8bb0 Bean \u652f\u6301\u914d\u7f6e\u52a8\u6001\u5237\u65b0\uff08\u5f53\u914d\u7f6e\u4e2d\u5fc3\u914d\u7f6e\u53d8\u66f4\u65f6\uff0c\u91cd\u65b0\u52a0\u8f7d Bean\uff09     | `@RefreshScope @Service public class ConfigService { ... }`          |  \n\n\n## \u4e8c\u3001\u6838\u5fc3\u7ec4\u4ef6\u8be6\u89e3  \n\n\n### 1. \u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0\uff08Service Discovery\uff09  \n**\u6838\u5fc3\u4f5c\u7528**\uff1a\u89e3\u51b3\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u670d\u52a1\u5b9e\u4f8b\u7684\u52a8\u6001\u7ba1\u7406\uff08\u6ce8\u518c\u3001\u53d1\u73b0\u3001\u5065\u5eb7\u68c0\u67e5\uff09\u3002", "top": 0, "createdAt": 1748600913, "style": "", "script": "", "head": "", "ogImage": "https://github.com/TubroCoder/blog/blob/main/image.png?raw=true", "createdDate": "2025-05-30", "dateLabelColor": "#0969da"}, "P7": {"htmlDir": "docs/post/qiu-zhi-mian-shi-bi-ji--springcloud#openFeign.html", "labels": ["\u9762\u8bd5\u7b14\u8bb0"], "postTitle": "\u6c42\u804c\u9762\u8bd5\u7b14\u8bb0-springcloud#openFeign", "postUrl": "post/qiu-zhi-mian-shi-bi-ji--springcloud%23openFeign.html", "postSourceUrl": "https://github.com/TubroCoder/blog/issues/7", "commentNum": 0, "wordCount": 7535, "description": "\n# Spring Cloud OpenFeign \u6838\u5fc3\u9762\u8bd5\u77e5\u8bc6\u70b9\u7b14\u8bb0  \n\n\n## \u4e00\u3001OpenFeign \u662f\u4ec0\u4e48\uff1f  \n\n\n### 1. \u5b9a\u4e49\u4e0e\u5b9a\u4f4d  \nOpenFeign \u662f Spring Cloud \u751f\u6001\u4e2d\u7684**\u58f0\u660e\u5f0f HTTP \u5ba2\u6237\u7aef**\uff0c\u7531 Netfix \u5f00\u6e90\uff08\u73b0\u7531\u793e\u533a\u7ef4\u62a4\uff09\u3002", "top": 0, "createdAt": 1748601263, "style": "", "script": "", "head": "", "ogImage": "https://github.com/TubroCoder/blog/blob/main/image.png?raw=true", "createdDate": "2025-05-30", "dateLabelColor": "#0969da"}, "P8": {"htmlDir": "docs/post/qiu-zhi-mian-shi-bi-ji--redis.html", "labels": ["\u9762\u8bd5\u7b14\u8bb0"], "postTitle": "\u6c42\u804c\u9762\u8bd5\u7b14\u8bb0-redis", "postUrl": "post/qiu-zhi-mian-shi-bi-ji--redis.html", "postSourceUrl": "https://github.com/TubroCoder/blog/issues/8", "commentNum": 0, "wordCount": 9966, "description": "\n# Redis \u6838\u5fc3\u9762\u8bd5\u77e5\u8bc6\u70b9\u7b14\u8bb0  \n\n\n## \u4e00\u3001Redis \u96c6\u7fa4\u6a21\u5f0f  \n\n\n### 1. \u4e3b\u4ece\u96c6\u7fa4\uff08Master-Slave\uff09  \n**\u6838\u5fc3\u76ee\u6807**\uff1a\u89e3\u51b3\u5355\u70b9\u6545\u969c\u95ee\u9898\uff0c\u5b9e\u73b0\u6570\u636e\u5197\u4f59\u548c\u8bfb\u8bf7\u6c42\u8d1f\u8f7d\u5747\u8861\u3002", "top": 0, "createdAt": 1748601718, "style": "", "script": "", "head": "", "ogImage": "https://github.com/TubroCoder/blog/blob/main/image.png?raw=true", "createdDate": "2025-05-30", "dateLabelColor": "#0969da"}, "P9": {"htmlDir": "docs/post/qiu-zhi-mian-shi-bi-ji--mq.html", "labels": ["\u9762\u8bd5\u7b14\u8bb0"], "postTitle": "\u6c42\u804c\u9762\u8bd5\u7b14\u8bb0-mq", "postUrl": "post/qiu-zhi-mian-shi-bi-ji--mq.html", "postSourceUrl": "https://github.com/TubroCoder/blog/issues/9", "commentNum": 0, "wordCount": 10627, "description": "\n# MQ\uff08\u6d88\u606f\u961f\u5217\uff09\u6838\u5fc3\u9762\u8bd5\u77e5\u8bc6\u70b9\u7b14\u8bb0  \n\n\n## \u4e00\u3001\u4e3a\u4ec0\u4e48\u9700\u8981 MQ\uff1f  \n\n\n### 1. \u6838\u5fc3\u4ef7\u503c  \n\u6d88\u606f\u961f\u5217\uff08Message Queue, MQ\uff09\u662f\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u7684**\u5f02\u6b65\u901a\u4fe1\u4e2d\u95f4\u4ef6**\uff0c\u6838\u5fc3\u89e3\u51b3\u4ee5\u4e0b\u95ee\u9898\uff1a  \n\n\n| \u95ee\u9898                | \u573a\u666f\u8bf4\u660e                                                                 | MQ \u89e3\u51b3\u65b9\u6848                                                           |  \n|---------------------|--------------------------------------------------------------------------|-----------------------------------------------------------------------|  \n| **\u7cfb\u7edf\u89e3\u8026**        | \u8ba2\u5355\u7cfb\u7edf\u9700\u901a\u77e5\u5e93\u5b58\u3001\u7269\u6d41\u3001\u652f\u4ed8\u7b49\u591a\u4e2a\u7cfb\u7edf\uff0c\u76f4\u63a5\u8c03\u7528\u5bfc\u81f4\u5f3a\u4f9d\u8d56             | \u8ba2\u5355\u7cfb\u7edf\u53ea\u53d1\u6d88\u606f\u5230 MQ\uff0c\u5176\u4ed6\u7cfb\u7edf\u8ba2\u9605\u6d88\u606f\uff0c\u4e92\u4e0d\u5f71\u54cd                     |  \n| **\u5f02\u6b65\u63d0\u901f**        | \u7528\u6237\u4e0b\u5355\u9700\u540c\u6b65\u8c03\u7528\u5e93\u5b58\u6263\u51cf\u3001\u79ef\u5206\u53d1\u653e\u7b49\u8017\u65f6\u64cd\u4f5c\uff0c\u54cd\u5e94\u65f6\u95f4\u957f               | \u4e3b\u6d41\u7a0b\uff08\u4e0b\u5355\uff09\u5b8c\u6210\u540e\uff0c\u5176\u4ed6\u64cd\u4f5c\u901a\u8fc7 MQ \u5f02\u6b65\u5904\u7406\uff0c\u54cd\u5e94\u65f6\u95f4\u4ece\u79d2\u7ea7\u2192\u6beb\u79d2\u7ea7  |  \n| **\u524a\u5cf0\u586b\u8c37**        | \u79d2\u6740\u6d3b\u52a8\u65f6\uff0c\u77ed\u65f6\u95f4\u5185\u8bf7\u6c42\u91cf\u66b4\u589e\uff0810\u4e07/\u79d2\uff09\uff0c\u8d85\u51fa\u6570\u636e\u5e93\u5904\u7406\u80fd\u529b\uff081\u4e07/\u79d2\uff09  | MQ \u7f13\u5b58\u8bf7\u6c42\uff08\u524a\u5cf0\uff09\uff0c\u6570\u636e\u5e93\u6309\u7a33\u5b9a\u901f\u7387\u6d88\u8d39\uff08\u586b\u8c37\uff09                     |  \n\n\n### 2. \u5178\u578b\u4f7f\u7528\u573a\u666f  \n- \u5f02\u6b65\u901a\u77e5\uff08\u5982\u77ed\u4fe1\u3001\u90ae\u4ef6\u53d1\u9001\uff09\uff1b  \n- \u65e5\u5fd7\u6536\u96c6\uff08\u5fae\u670d\u52a1\u65e5\u5fd7\u6c47\u603b\u5230 ELK\uff09\uff1b  \n- \u6d41\u91cf\u63a7\u5236\uff08\u79d2\u6740\u6d3b\u52a8\u7684\u8bf7\u6c42\u7f13\u51b2\uff09\uff1b  \n- \u6570\u636e\u540c\u6b65\uff08MySQL -binlog \u901a\u8fc7 MQ \u540c\u6b65\u5230 ES\uff09\u3002", "top": 0, "createdAt": 1748602029, "style": "", "script": "", "head": "", "ogImage": "https://github.com/TubroCoder/blog/blob/main/image.png?raw=true", "createdDate": "2025-05-30", "dateLabelColor": "#0969da"}, "P10": {"htmlDir": "docs/post/qiu-zhi-mian-shi-bi-ji---guan-xi-xing-shu-ju-ku-\uff08mysql\u3001pg\uff09.html", "labels": ["\u9762\u8bd5\u7b14\u8bb0"], "postTitle": "\u6c42\u804c\u9762\u8bd5\u7b14\u8bb0-\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff08mysql\u3001pg\uff09", "postUrl": "post/qiu-zhi-mian-shi-bi-ji---guan-xi-xing-shu-ju-ku-%EF%BC%88mysql%E3%80%81pg%EF%BC%89.html", "postSourceUrl": "https://github.com/TubroCoder/blog/issues/10", "commentNum": 0, "wordCount": 8883, "description": "\n# \u5173\u7cfb\u578b\u6570\u636e\u5e93\u6838\u5fc3\u9762\u8bd5\u77e5\u8bc6\u70b9\u7b14\u8bb0  \n\n\n## \u4e00\u3001MySQL vs PostgreSQL \u5bf9\u6bd4  \n\n\n### 1. \u6838\u5fc3\u5b9a\u4f4d\u4e0e\u9002\u7528\u573a\u666f  \n| \u7279\u6027                | MySQL                                      | PostgreSQL                               |  \n|---------------------|------------------------------------------|------------------------------------------|  \n| **\u5b9a\u4f4d**            | \u8f7b\u91cf\u7ea7\u3001\u9ad8\u6027\u80fd OLTP \u6570\u636e\u5e93\uff08\u4e92\u8054\u7f51\u9996\u9009\uff09  | \u4f01\u4e1a\u7ea7\u3001\u652f\u6301\u590d\u6742\u4e1a\u52a1\u903b\u8f91\u7684\u901a\u7528\u6570\u636e\u5e93     |  \n| **\u9002\u7528\u573a\u666f**        | \u9ad8\u5e76\u53d1\u8bfb\u5199\u3001\u7535\u5546/\u793e\u4ea4\u7c7b\u4e1a\u52a1\uff08\u5982\u8ba2\u5355\u3001\u7528\u6237\u8868\uff09 | \u91d1\u878d/\u653f\u52a1/\u6570\u636e\u5206\u6790\uff08\u9700\u590d\u6742 SQL\u3001\u4e8b\u52a1\u5f3a\u4e00\u81f4\uff09 |  \n| **\u6570\u636e\u7c7b\u578b**        | \u652f\u6301\u57fa\u7840\u7c7b\u578b + \u90e8\u5206\u6269\u5c55\uff08\u5982 JSON\uff09         | \u652f\u6301\u590d\u6742\u7c7b\u578b\uff08\u6570\u7ec4\u3001\u679a\u4e3e\u3001JSONB\u3001\u51e0\u4f55\u7c7b\u578b\uff09 |  \n| **\u4e8b\u52a1\u7279\u6027**        | InnoDB \u652f\u6301 ACID\uff0c\u9ed8\u8ba4\u9694\u79bb\u7ea7\u522b RR          | \u5168\u529f\u80fd ACID\uff0c\u652f\u6301\u66f4\u7ec6\u7c92\u5ea6\u9501\uff08\u884c\u7ea7\u9501\u9ed8\u8ba4\uff09 |  \n| **\u6269\u5c55\u6027**          | \u4f9d\u8d56\u4e2d\u95f4\u4ef6\uff08\u5982 MyCat\uff09\u5b9e\u73b0\u5206\u5e93\u5206\u8868         | \u5185\u7f6e CTE\u3001\u7a97\u53e3\u51fd\u6570\u3001\u81ea\u5b9a\u4e49\u51fd\u6570\uff08\u6269\u5c55\u6027\u5f3a\uff09|  \n\n\n### 2. \u5173\u952e\u5dee\u5f02\u5bf9\u6bd4  \n#### \uff081\uff09\u6570\u636e\u7c7b\u578b  \n| MySQL \u7279\u6709\u7c7b\u578b       | PostgreSQL \u7279\u6709\u7c7b\u578b         | \u901a\u7528\u7c7b\u578b\uff08\u5747\u652f\u6301\uff09         |  \n|---------------------|-----------------------------|----------------------------|  \n| `ENUM`\u3001`SET`       | `ARRAY`\u3001`HSTORE`\u3001`JSONB`  | `INT`\u3001`VARCHAR`\u3001`DATE`   |  \n| `AUTO_INCREMENT`    | `SERIAL`\uff08\u81ea\u589e\u5e8f\u5217\uff09         | `BLOB`\u3001`TEXT`             |  \n\n#### \uff082\uff09\u4e8b\u52a1\u9694\u79bb\u7ea7\u522b  \n| \u9694\u79bb\u7ea7\u522b            | MySQL\uff08InnoDB\uff09             | PostgreSQL                 |  \n|---------------------|-----------------------------|----------------------------|  \n| **\u8bfb\u672a\u63d0\u4ea4**        | \u652f\u6301                          | \u652f\u6301                       |  \n| **\u8bfb\u5df2\u63d0\u4ea4**        | \u652f\u6301\uff08\u9ed8\u8ba4 RR\uff0c\u53ef\u5207\u6362\uff09       | \u652f\u6301\uff08\u9ed8\u8ba4 RC\uff09            |  \n| **\u53ef\u91cd\u590d\u8bfb**        | \u9ed8\u8ba4\u9694\u79bb\u7ea7\u522b                 | \u652f\u6301                       |  \n| **\u4e32\u884c\u5316**          | \u652f\u6301                          | \u652f\u6301                       |  \n\n#### \uff083\uff09\u5b58\u50a8\u5f15\u64ce  \n| MySQL                 | PostgreSQL                   |  \n|---------------------|-----------------------------|  \n| \u591a\u5f15\u64ce\u67b6\u6784\uff08InnoDB/MyISAM \u7b49\uff09 | \u5355\u5f15\u64ce\u67b6\u6784\uff08\u5185\u6838\u96c6\u6210\u5b58\u50a8\u903b\u8f91\uff09|  \n| \u9ed8\u8ba4\u5f15\u64ce InnoDB\uff08\u652f\u6301\u4e8b\u52a1\uff09   | \u9ed8\u8ba4\u5f15\u64ce Heap\uff08\u5185\u5b58\u8868\uff09\uff1fNo\uff01\u9ed8\u8ba4\u662f\u4e8b\u52a1\u5b89\u5168\u7684\u5b58\u50a8\u5f15\u64ce\uff0c\u5b9e\u9645PostgreSQL\u6ca1\u6709\u5b58\u50a8\u5f15\u64ce\u7684\u6982\u5ff5\uff0c\u5176\u5b58\u50a8\u5f15\u64ce\u662f\u5185\u7f6e\u7684\uff0c\u652f\u6301\u4e8b\u52a1\u548c\u590d\u6742\u7279\u6027\u3002", "top": 0, "createdAt": 1748602320, "style": "", "script": "", "head": "", "ogImage": "https://github.com/TubroCoder/blog/blob/main/image.png?raw=true", "createdDate": "2025-05-30", "dateLabelColor": "#0969da"}, "P11": {"htmlDir": "docs/post/qiu-zhi-mian-shi-bi-ji--Linux.html", "labels": ["\u9762\u8bd5\u7b14\u8bb0"], "postTitle": "\u6c42\u804c\u9762\u8bd5\u7b14\u8bb0-Linux", "postUrl": "post/qiu-zhi-mian-shi-bi-ji--Linux.html", "postSourceUrl": "https://github.com/TubroCoder/blog/issues/11", "commentNum": 0, "wordCount": 8805, "description": "\n# Linux \u6838\u5fc3\u9762\u8bd5\u77e5\u8bc6\u70b9\u7b14\u8bb0  \n\n\n## \u4e00\u3001Linux \u57fa\u7840\u6982\u5ff5  \n\n\n### 1. Linux \u5185\u6838\u4e0e\u53d1\u884c\u7248  \n#### \uff081\uff09\u5185\u6838 vs \u53d1\u884c\u7248  \n- **\u5185\u6838\uff08Kernel\uff09**\uff1a\u64cd\u4f5c\u7cfb\u7edf\u6838\u5fc3\uff0c\u8d1f\u8d23\u8fdb\u7a0b\u8c03\u5ea6\u3001\u5185\u5b58\u7ba1\u7406\u3001\u786c\u4ef6\u9a71\u52a8\u3001\u6587\u4ef6\u7cfb\u7edf\u7b49\u5e95\u5c42\u529f\u80fd\uff08\u5982 Linux 5.15.x\uff09\u3002", "top": 0, "createdAt": 1748602431, "style": "", "script": "", "head": "", "ogImage": "https://github.com/TubroCoder/blog/blob/main/image.png?raw=true", "createdDate": "2025-05-30", "dateLabelColor": "#0969da"}, "P12": {"htmlDir": "docs/post/qiu-zhi-mian-shi-bi-ji--docker.html", "labels": ["\u9762\u8bd5\u7b14\u8bb0"], "postTitle": "\u6c42\u804c\u9762\u8bd5\u7b14\u8bb0-docker", "postUrl": "post/qiu-zhi-mian-shi-bi-ji--docker.html", "postSourceUrl": "https://github.com/TubroCoder/blog/issues/12", "commentNum": 0, "wordCount": 7373, "description": "\n# Docker \u6838\u5fc3\u9762\u8bd5\u77e5\u8bc6\u70b9\u7b14\u8bb0  \n\n\n## \u4e00\u3001Docker \u57fa\u7840\u6982\u5ff5  \n\n\n### 1. \u4ec0\u4e48\u662f Docker\uff1f  \nDocker \u662f\u4e00\u4e2a\u5f00\u6e90\u7684**\u5bb9\u5668\u5316\u5e73\u53f0**\uff0c\u901a\u8fc7\u5c06\u5e94\u7528\u7a0b\u5e8f\u53ca\u5176\u4f9d\u8d56\u6253\u5305\u6210**\u955c\u50cf\uff08Image\uff09**\uff0c\u8fd0\u884c\u5728**\u5bb9\u5668\uff08Container\uff09**\u4e2d\uff0c\u5b9e\u73b0**\u73af\u5883\u9694\u79bb\u3001\u5feb\u901f\u90e8\u7f72\u3001\u8d44\u6e90\u9ad8\u6548\u5229\u7528**\u3002", "top": 0, "createdAt": 1748602506, "style": "", "script": "", "head": "", "ogImage": "https://github.com/TubroCoder/blog/blob/main/image.png?raw=true", "createdDate": "2025-05-30", "dateLabelColor": "#0969da"}, "P13": {"htmlDir": "docs/post/qiu-zhi-mian-shi-bi-ji--JVM-xiang-guan.html", "labels": ["\u9762\u8bd5\u7b14\u8bb0"], "postTitle": "\u6c42\u804c\u9762\u8bd5\u7b14\u8bb0-JVM\u76f8\u5173", "postUrl": "post/qiu-zhi-mian-shi-bi-ji--JVM-xiang-guan.html", "postSourceUrl": "https://github.com/TubroCoder/blog/issues/13", "commentNum": 0, "wordCount": 11227, "description": "\n# JVM \u6838\u5fc3\u9762\u8bd5\u77e5\u8bc6\u70b9\u7b14\u8bb0  \n\n\n## \u4e00\u3001\u7c7b\u52a0\u8f7d\u673a\u5236\u4e0e\u7c7b\u52a0\u8f7d\u5668  \n\n\n### 1. \u7c7b\u52a0\u8f7d\u7684\u751f\u547d\u5468\u671f  \n\u7c7b\u4ece\u88ab\u52a0\u8f7d\u5230\u5185\u5b58\u5230\u5378\u8f7d\u7684\u5b8c\u6574\u8fc7\u7a0b\u5206\u4e3a **\u52a0\u8f7d\u2192\u8fde\u63a5\u2192\u521d\u59cb\u5316\u2192\u4f7f\u7528\u2192\u5378\u8f7d** 5 \u4e2a\u9636\u6bb5\uff0c\u5176\u4e2d\u8fde\u63a5\u9636\u6bb5\u5305\u542b\u9a8c\u8bc1\u3001\u51c6\u5907\u3001\u89e3\u6790\u4e09\u4e2a\u5b50\u9636\u6bb5\u3002", "top": 0, "createdAt": 1748602989, "style": "", "script": "", "head": "", "ogImage": "https://github.com/TubroCoder/blog/blob/main/image.png?raw=true", "createdDate": "2025-05-30", "dateLabelColor": "#0969da"}}, "singeListJson": {}, "labelColorDict": {"bug": "#d73a4a", "documentation": "#0075ca", "duplicate": "#cfd3d7", "enhancement": "#a2eeef", "good first issue": "#7057ff", "help wanted": "#008672", "invalid": "#e4e669", "question": "#d876e3", "spring": "#c5def5", "wontfix": "#ffffff", "\u9762\u8bd5\u7b14\u8bb0": "#D93F0B"}, "displayTitle": "Tubro\u2018s blog", "faviconUrl": "https://github.com/TubroCoder/blog/blob/main/image.png?raw=true", "ogImage": "https://github.com/TubroCoder/blog/blob/main/image.png?raw=true", "primerCSS": "<link href='https://mirrors.sustech.edu.cn/cdnjs/ajax/libs/Primer/21.0.7/primer.css' rel='stylesheet' />", "homeUrl": "https://TubroCoder.github.io/blog", "prevUrl": "disabled", "nextUrl": "disabled"}